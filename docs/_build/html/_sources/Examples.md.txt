# Examples

## New User

Every API user needs an account for the api. To create one use the **newUser** mutation:

```graphql
mutation {
  newUser(input: {username: "admin", password: "secrect", email: "admin@example.com"}) {
    data
    errors {
      message
    }
  }
}
```

In return you get the data property containing the **libraryId** from the new user when successfull.
The libraryId is returned only for information and not needed in future requests.

## SignIn

Most of the later reqeusts need a valid jwt token containing the personal libraryId.
To get the token use the **signIn** mutation:

```graphql
mutation {
  singIn(input: {username: "admin", password: "secret"}) {
    data
    errors {
      message
    }
  }
}
```

Data contains the jwt token as string.
Bad credentials will return an error message.

## Adding books

All following mutations need a valid jwt token send with them in the http-header, e.g.:

```json
{
  "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6ImFkbWluIiwiTGlicmFyeUlkIjoiZWU0NzExMTUtMDQyNS00ODliLTkzMWEtOGIzZjdmMTg3MjA1IiwibmJmIjoxNjEwNDgwOTczLCJleHAiOjE2MTA1MTA5NzMsImlhdCI6MTYxMDQ4MDk3MywiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo1MDAwIiwiYXVkIjoiaHR0cDovL2xvY2FsaG9zdDo1MDAwIn0.gCEmi7IYWlk3TbiuIH1j5kH-BNriYBeJSlTanmYqO80"
}
```

Adding books is a 2 phase transaction.
First we need the book itself, use the **addBook** mutation to create one. Save the bookId (*data.id*) for the next request.

```graphql
mutation {
  addBook(input: {identifier: "987-2342-345435", title: "Example book"}) {
    errors {
      message
      code
    }
    data {
      id
      title
    }
  }
}
```

Secondly we need to put the book into our library using the **moveBookInLibrary** mutation.
An error is returned when:

* the book already is in the users library

```graphql
mutation {
  moveBookInLibrary(input: {bookId: "Qm9vawpsOA==", status: ACTIVE}) {
    data {
      id
    }
    errors {
      message
      code
    }
  }
}
```

As alternative we can add the book as recommendation using the **addBookRecommendation** mutation. Optionally you can add a note for this relation.

```graphql
mutation AddBookRec {
    addBookRecommendation(input: { sourceBookId: "Qm9vawpsMQ==", targetBookId: "Qm9vawpsOA==", note: "Test note" }) {
        data {
          note {
            content
          }
        }
        errors {
          message
        }
    }
}
```
